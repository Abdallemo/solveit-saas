// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type BookingStatus string

const (
	BookingStatusPENDING  BookingStatus = "PENDING"
	BookingStatusPAID     BookingStatus = "PAID"
	BookingStatusCANCELED BookingStatus = "CANCELED"
)

func (e *BookingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BookingStatus(s)
	case string:
		*e = BookingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BookingStatus: %T", src)
	}
	return nil
}

type NullBookingStatus struct {
	BookingStatus BookingStatus
	Valid         bool // Valid is true if BookingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBookingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BookingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BookingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBookingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BookingStatus), nil
}

type FeedbackCategory string

const (
	FeedbackCategoryTASK      FeedbackCategory = "TASK"
	FeedbackCategoryMENTORING FeedbackCategory = "MENTORING"
)

func (e *FeedbackCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FeedbackCategory(s)
	case string:
		*e = FeedbackCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for FeedbackCategory: %T", src)
	}
	return nil
}

type NullFeedbackCategory struct {
	FeedbackCategory FeedbackCategory
	Valid            bool // Valid is true if FeedbackCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFeedbackCategory) Scan(value interface{}) error {
	if value == nil {
		ns.FeedbackCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FeedbackCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFeedbackCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FeedbackCategory), nil
}

type Method string

const (
	MethodSYSTEM Method = "SYSTEM"
	MethodEMAIL  Method = "EMAIL"
)

func (e *Method) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Method(s)
	case string:
		*e = Method(s)
	default:
		return fmt.Errorf("unsupported scan type for Method: %T", src)
	}
	return nil
}

type NullMethod struct {
	Method Method
	Valid  bool // Valid is true if Method is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMethod) Scan(value interface{}) error {
	if value == nil {
		ns.Method, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Method.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Method), nil
}

type PaymentPorpose string

const (
	PaymentPorposeTaskPayment   PaymentPorpose = "Task Payment"
	PaymentPorposeMentorBooking PaymentPorpose = "Mentor Booking"
)

func (e *PaymentPorpose) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentPorpose(s)
	case string:
		*e = PaymentPorpose(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentPorpose: %T", src)
	}
	return nil
}

type NullPaymentPorpose struct {
	PaymentPorpose PaymentPorpose
	Valid          bool // Valid is true if PaymentPorpose is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentPorpose) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentPorpose, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentPorpose.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentPorpose) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentPorpose), nil
}

type PaymentStatus string

const (
	PaymentStatusHOLD      PaymentStatus = "HOLD"
	PaymentStatusRELEASED  PaymentStatus = "RELEASED"
	PaymentStatusSUCCEEDED PaymentStatus = "SUCCEEDED"
	PaymentStatusFAILED    PaymentStatus = "FAILED"
	PaymentStatusCANCELED  PaymentStatus = "CANCELED"
	PaymentStatusREFUNDED  PaymentStatus = "REFUNDED"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus
	Valid         bool // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type RefundStatus string

const (
	RefundStatusPENDING             RefundStatus = "PENDING"
	RefundStatusPROCESSING          RefundStatus = "PROCESSING"
	RefundStatusREFUNDED            RefundStatus = "REFUNDED"
	RefundStatusREJECTED            RefundStatus = "REJECTED"
	RefundStatusFAILED              RefundStatus = "FAILED"
	RefundStatusPENDINGPOSTERACTION RefundStatus = "PENDING_POSTER_ACTION"
)

func (e *RefundStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RefundStatus(s)
	case string:
		*e = RefundStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for RefundStatus: %T", src)
	}
	return nil
}

type NullRefundStatus struct {
	RefundStatus RefundStatus
	Valid        bool // Valid is true if RefundStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRefundStatus) Scan(value interface{}) error {
	if value == nil {
		ns.RefundStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RefundStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRefundStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RefundStatus), nil
}

type Role string

const (
	RoleADMIN     Role = "ADMIN"
	RoleMODERATOR Role = "MODERATOR"
	RolePOSTER    Role = "POSTER"
	RoleSOLVER    Role = "SOLVER"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role
	Valid bool // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type Status string

const (
	StatusPENDING Status = "PENDING"
	StatusSENT    Status = "SENT"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status
	Valid  bool // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type TaskStatus string

const (
	TaskStatusOPEN       TaskStatus = "OPEN"
	TaskStatusASSIGNED   TaskStatus = "ASSIGNED"
	TaskStatusINPROGRESS TaskStatus = "IN_PROGRESS"
	TaskStatusCOMPLETED  TaskStatus = "COMPLETED"
	TaskStatusSUBMITTED  TaskStatus = "SUBMITTED"
)

func (e *TaskStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskStatus(s)
	case string:
		*e = TaskStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskStatus: %T", src)
	}
	return nil
}

type NullTaskStatus struct {
	TaskStatus TaskStatus
	Valid      bool // Valid is true if TaskStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TaskStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskStatus), nil
}

type Tier string

const (
	TierPOSTER Tier = "POSTER"
	TierSOLVER Tier = "SOLVER"
	TierValue2 Tier = "SOLVER++"
)

func (e *Tier) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Tier(s)
	case string:
		*e = Tier(s)
	default:
		return fmt.Errorf("unsupported scan type for Tier: %T", src)
	}
	return nil
}

type NullTier struct {
	Tier  Tier
	Valid bool // Valid is true if Tier is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTier) Scan(value interface{}) error {
	if value == nil {
		ns.Tier, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Tier.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTier) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Tier), nil
}

type Visibility string

const (
	VisibilityPublic  Visibility = "public"
	VisibilityPrivate Visibility = "private"
)

func (e *Visibility) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Visibility(s)
	case string:
		*e = Visibility(s)
	default:
		return fmt.Errorf("unsupported scan type for Visibility: %T", src)
	}
	return nil
}

type NullVisibility struct {
	Visibility Visibility
	Valid      bool // Valid is true if Visibility is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVisibility) Scan(value interface{}) error {
	if value == nil {
		ns.Visibility, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Visibility.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVisibility) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Visibility), nil
}

type Account struct {
	UserId            pgtype.UUID
	Type              string
	Provider          string
	ProviderAccountId string
	RefreshToken      pgtype.Text
	AccessToken       pgtype.Text
	ExpiresAt         pgtype.Int4
	TokenType         pgtype.Text
	Scope             pgtype.Text
	IDToken           pgtype.Text
	SessionState      pgtype.Text
}

type AiFlag struct {
	ID              pgtype.UUID
	HashedContent   string
	Reason          string
	CreatedAt       pgtype.Timestamptz
	ConfidenceScore int32
}

type AiRule struct {
	ID         pgtype.UUID
	Rule       string
	Decription string
	IsActive   bool
	AdminID    pgtype.UUID
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
}

type AiTestSandbox struct {
	ID         pgtype.UUID
	Content    string
	AdminID    pgtype.UUID
	TestAmount int32
	CreatedAt  pgtype.Timestamptz
	UpdatedAt  pgtype.Timestamptz
}

type BlockedTask struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	TaskID    pgtype.UUID
	Reason    pgtype.Text
	CreatedAt pgtype.Timestamptz
}

type Feedback struct {
	ID              pgtype.UUID
	PosterID        pgtype.UUID
	SolverID        pgtype.UUID
	FeedbackType    FeedbackCategory
	MentorBookingID pgtype.UUID
	TaskID          pgtype.UUID
	Rating          int32
	Comment         pgtype.Text
	CreatedAt       pgtype.Timestamptz
}

type Log struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamptz
	Level     string
	Message   string
	Error     pgtype.Text
}

type MentorSession struct {
	ID           pgtype.UUID
	BookingID    pgtype.UUID
	SessionDate  pgtype.Date
	TimeSlot     []byte
	SessionStart pgtype.Timestamptz
	SessionEnd   pgtype.Timestamptz
	CreatedAt    pgtype.Timestamptz
}

type MentorshipBooking struct {
	ID        pgtype.UUID
	SolverID  pgtype.UUID
	StudentID pgtype.UUID
	Price     pgtype.Int4
	Status    BookingStatus
	PaymentID pgtype.UUID
	Notes     pgtype.Text
	CreatedAt pgtype.Timestamptz
}

type MentorshipChat struct {
	ID        pgtype.UUID
	SeesionID pgtype.UUID
	Message   pgtype.Text
	SentBy    pgtype.UUID
	ReadAt    pgtype.Timestamptz
	Pending   pgtype.Bool
	IsDeleted pgtype.Bool
	CreatedAt pgtype.Timestamptz
}

type MentorshipChatFile struct {
	ID           pgtype.UUID
	ChatID       pgtype.UUID
	UploadedByID pgtype.UUID
	FileName     string
	FileType     string
	FileSize     int32
	FileLocation string
	FilePath     string
	UploadedAt   pgtype.Timestamptz
}

type MentorshipProfile struct {
	ID             pgtype.UUID
	UserID         pgtype.UUID
	DisplayName    string
	Avatar         string
	Title          string
	Description    string
	RatePerHour    float32
	AvailableTimes []byte
	IsPublished    bool
	Timezone       string
	CreatedAt      pgtype.Timestamptz
}

type Notification struct {
	ID         pgtype.UUID
	SenderID   string
	ReceiverID string
	Subject    pgtype.Text
	Content    string
	Method     Method
	Read       bool
	CreatedAt  pgtype.Timestamptz
}

type Payment struct {
	ID                    pgtype.UUID
	UserID                pgtype.UUID
	Amount                int32
	Status                NullPaymentStatus
	StripePaymentIntentID string
	StripeChargeID        pgtype.Text
	Purpose               pgtype.Text
	CreatedAt             pgtype.Timestamptz
	ReleaseDate           pgtype.Timestamptz
}

type Refund struct {
	ID             pgtype.UUID
	PaymentID      pgtype.UUID
	TaskID         pgtype.UUID
	RefundReason   pgtype.Text
	RefundStatus   NullRefundStatus
	ModeratorId    pgtype.UUID
	RefundedAt     pgtype.Timestamptz
	StripeRefundID pgtype.Text
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

type Solution struct {
	ID          pgtype.UUID
	WorkspaceID pgtype.UUID
	TaskID      pgtype.UUID
	Content     pgtype.Text
	FileUrl     pgtype.Text
	IsFinal     pgtype.Bool
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type SolutionFile struct {
	ID              pgtype.UUID
	SolutionID      pgtype.UUID
	WorkspaceFileID pgtype.UUID
}

type SolutionWorkspace struct {
	ID        pgtype.UUID
	TaskID    pgtype.UUID
	SolverID  pgtype.UUID
	Content   pgtype.Text
	CreatedAt pgtype.Timestamptz
}

type SolutionWorkspaceFile struct {
	ID           pgtype.UUID
	WorkspaceID  pgtype.UUID
	UploadedByID pgtype.UUID
	FileName     string
	FileType     string
	FileSize     int32
	FileLocation string
	FilePath     string
	IsDraft      pgtype.Bool
	UploadedAt   pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

type SolverProfile struct {
	UserID       pgtype.UUID
	PortfolioUrl pgtype.Text
	Skills       []string
	AvgRating    pgtype.Numeric
	TaskSolved   pgtype.Int4
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

type Subscription struct {
	ID                       pgtype.UUID
	UserId                   pgtype.UUID
	StripeSubscriptionItemID pgtype.Text
	StripeSubscriptionID     pgtype.Text
	Tier                     Tier
	CancelAt                 pgtype.Timestamp
	IsCancelScheduled        bool
	Status                   string
	Interval                 string
	NextBilling              pgtype.Timestamp
	Price                    int32
	CreatedAt                pgtype.Timestamptz
}

type Task struct {
	ID          pgtype.UUID
	Title       string
	Description string
	Content     string
	Price       int32
	PosterID    pgtype.UUID
	SolverID    pgtype.UUID
	Visibility  Visibility
	CategoryID  pgtype.UUID
	PaymentID   pgtype.UUID
	Deadline    string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	TaskStatus  TaskStatus
	AssignedAt  pgtype.Timestamptz
}

type TaskCategory struct {
	ID        pgtype.UUID
	Name      string
	CreatedAt pgtype.Timestamp
}

type TaskComment struct {
	ID        pgtype.UUID
	TaskID    pgtype.UUID
	UserID    pgtype.UUID
	Content   string
	CreatedAt pgtype.Timestamptz
}

type TaskDeadline struct {
	ID        pgtype.UUID
	Deadline  string
	CreatedAt pgtype.Timestamptz
}

type TaskDraft struct {
	ID            pgtype.UUID
	UserID        pgtype.UUID
	Title         string
	Description   string
	Content       string
	Category      string
	Deadline      string
	UpdatedAt     pgtype.Timestamptz
	UploadedFiles []byte
	Visibility    Visibility
	Price         int32
	ContentText   string
}

type TaskFile struct {
	ID           pgtype.UUID
	TaskID       pgtype.UUID
	FileName     string
	FileType     string
	FileSize     int32
	FileLocation string
	FilePath     string
	UploadedAt   pgtype.Timestamptz
}

type User struct {
	ID                  pgtype.UUID
	Name                string
	Email               string
	Password            pgtype.Text
	Role                Role
	StripeCustomerID    pgtype.Text
	StripeAccountID     pgtype.Text
	StripeAccountLinked bool
	EmailVerified       pgtype.Timestamp
	Image               pgtype.Text
	CreatedAt           pgtype.Timestamptz
}

type UserDetail struct {
	UserID              pgtype.UUID
	OnboardingCompleted bool
	FirstName           pgtype.Text
	LastName            pgtype.Text
	DateOfBirth         pgtype.Date
	Address             []byte
	Business            []byte
	UpdatedAt           pgtype.Timestamptz
}

type VerificationToken struct {
	ID      pgtype.UUID
	Email   pgtype.Text
	Token   pgtype.Text
	Expires pgtype.Timestamptz
}
